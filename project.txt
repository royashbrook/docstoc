goal of the system
	put as many documents on docstoc under my name as possible

items of interest
	should allow any pc to run the 'client'
	should allow the urls to be centrally located and svc accessible
	should be db backend driven by sqlce

Version 1!!

description of use
	basically the entire system will gather lists of urls that we want to turn into docs. it will
	then find a way to turn those urls into docs. and finally it will upload those docs to
	docstoc.com under my profile as quickly as possible.

	components:
		url service
			this holds and manages the urls to turn into docs
		url generator
			this generates urls in some fashion and then puts them into the url service
		doc generator
			this grabs urls from the url service and turns them into docs
		doc uploader
			this uploads docs to docstoc

		
url service:
	data description:
		id		-	an id
		url		-	the actual url
		title		-	this is the title for the url as well as the title for the document
		category	-	it's possible we'll have diff types of urls, so 
					this will allow for some flexibility in pre/post processing		
		state		-	this will show what state a url is in (new, processed, etc)
		modified	-	this shows when the url was modified
	methods
		crud
		getmany/putmany/deletemany? probably just odata.
		

url generator:
	currently we have enough urls generated, so this can wait til later
	generate daily links from yahoo (printable version)
	grab links from the daily
	generate daily links from foxnews
	generate daily links from ap
	generate mashup docs preferably. to do this we'll need an additional svc like flirb
	digg!!
	techcrunch!!!
	lifehacker!!!

doc generator:
	 @"http://pdfmyurl.com?url={0}" for now. otherwise...
	string ff_file = "\"c:\\Program Files\\Mozilla Firefox\\firefox.exe\"";
	string args = " -print \"http://en.wikipedia.org/wiki/{0}\" -printmode pdf -printfile \"c:\\projects\\ds11\\{1}.pdf\"";
	have to use util.cmd in linqpad
	when installing princexml, have to make sure you use a path to the BIN folder. 7.1 was tested for this. see below for sample linqpad query.
	please also note the paths and the fact that we are utilizing custom CSS and fonts for our purposes.

	md c:\ds --folder for all this stuff and the css files
		note: problably should pre-prep this folder and then i could just copy it with scripts etc.
	md c:\ds\pdf --folder to hold the actual pdfs
	copy css files into c:\ds
	install princexml (7 or 8 or whatever)
	set path var to include the engine\bin folder in the prince folder (so you can invoke prince from anywhere
	utilize looping script for random (or preloaded) wiki words using these vars (script below)
		string pre = "http://en.wikipedia.org/wiki/";
		string wiki_file = u.Replace("/","-");
		string pdf_file = string.Format("{0}.pdf",wiki_file);
		string pdf_root = "C:\\ds\\pdf\\";
		string pdf_file_path = string.Format("{0}{1}",pdf_root,pdf_file);
		string prince = string.Format(
			"prince --no-author-style -s c:/ds/wiki.css {2}{0} -o \"{1}\"",u,pdf_file_path,pre);
doc uploader:
	currently this is the docstoc uploader. need a nice way to automate




Tested LINQPad Query:
void Main()
{
	foreach(var id in this.VwExportRandom.AsEnumerable())
	{
		var items = Wus.Where(e =>e.Id.Equals(id.Id));
		foreach(var item in items)
		{
			item.Status = prince(item.Url);
			item.Modified = DateTime.Now;
			Console.WriteLine("{0}		{1}",item.Status,item.Url);
		}
		this.SubmitChanges();
	}
}
string prince(string u)
{
	
		// setup our strings
		string pre = "http://en.wikipedia.org/wiki/";
		string wiki_file = u.Replace("/","-");
		string pdf_file = string.Format("{0}.pdf",wiki_file);
		string pdf_root = "C:\\ds\\pdf\\";
		string pdf_file_path = string.Format("{0}{1}",pdf_root,pdf_file);
		string prince = string.Format(
			"prince --no-author-style -s c:/ds/wiki.css {2}{0} -o \"{1}\"",u,pdf_file_path,pre);
		
		// prince the file
		try{
			Util.Cmd(prince);
			return "princed";
		}
		catch(Exception ex)
		{
			ex.Dump();
			return "-princed";
		}

		
}